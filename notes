THINGS TO REMEMBER

what does min_ant_for_path in s_pathset need to be an array

THINGS LEFT TO DO
DONE - update delimiter to reflect npaths_delimiter
DONE - set up the base paths
DONE - set up the bfs
DONE - combine the two sides of path and update variables
DONE - update the farm to reflect paths that have touched that node
DONE - verify solution
DONE - realloc
DONE - delete path_info
DONE - delete pathsets
		delete_bfs - same as delete paths i think
DONe - make solution printable
Done - compile
done - test
Done - norm
done - test done - notes
done - guide for how to solve
done - readme
done - check file order
done - check names, includes, variables


done - make ants struct
done - store longest room name
done - mirror the paths
done - combine ends a different way

done  - make a doubly linked list or work around a single one for the pathsets?

things to explain
	room id, path id, breadth first search

line -> buff in s_input
longest_room_name -> longest_room_name_len or something. make generally less uncomforable
graph -> rooms dont think i can thought because of the btree being rooms already
struct_solve -> struct_info
basepaths -> source_nodes or base_nodes maybe
move paths and npaths to the top of the s_pathset struct

save a delimiter in the solve struct for moving backwards
check difference between moving twice as fast or once on the bfs backwards

style

in structs, the same types should be in the same location
struct function naming, should go in struct_*.c
init - set to zero, possibly allocate
setup - set up struct given initial arguemtents
update - update struct or parts of struct with new conditions
delete - delete information inside struct, then struct itself

if statement has more than one line, indent continuation lines wit 2 tabs
variables keep types together
includes go project, libft, then system. alphebetized in that order
functions are sorted upwards
parameters 
size = total available size
len = current length being used




/*
**	rules for solving:
**		- paths are stored in the queue, and to get to a path you go backwards using a previous pointer 
**		- when a path intersects with the same base path, do not continue the current path
**		- when a path intersects with a different base path, note that they cannot coexist by adding that specific path to the DNI list
**		- use a pointer to the double array so that the path info can be updated at any point
**	
**		- paths that split get a new number on path to avoid
**		- a new path set is made when starting paths intersect (paths with different identifiers)
**		- remember that a path has to avoid itself
**		- if a path crosses a path it can't interesect it the longer one can be destroyed, unless it has branched from start?
**		- the longer one will always be the one you're currently extending
**		- paths are stored as arrays, but there is a linked list of path sets?
**		- if a path has made it to the end first, all other paths that have branched from it can be destroyed. NO
**				because what if the shorter path is needed by another identifier
**		- actually every path gets an identifier?? and every path also gets a base path which it cant interract with
*/


TO SAVE SPACE
- delete larger binary tree wrapper
- use singe bits instead of whole data type in structs

TO SAVE TIME
	- Try using other vairables aren't doubling everytime you need more memory
		1.5 MIGHT be more effiecent. Try it
	- Try using more write calls instead of more malloc calls?
	- for input, try different initial allocations. Maybe the difference between using the size of a line
		vs some larger number just for less allocations
	- make individual variables for things that are hard to access
	- dfs?

1 - should i create a binary tree of the rooms as i receive them
		pros:
			validation would be made quicker and easier
		cons:
			might not need to be validated which means it could be a waste of
			space and/or time

2 - how to store the paths that are created. must be efficient

still need to make the queue to store each successive room. there are
going to be a lot of data structures in this, maybe try to limit that for
time? or would it be fine to use a lot and it would be faster because of the
structures choosen



int		i;
int		room;
int		#ofrooms;

#ofrooms = 8;
firsthalf = #ofrooms / 2;
room = 0;
i = 0;
while (i < #ofrooms)
{
	//first look through the rooms by column
	m[column][room];
	++i;
}
while (i < #ofrooms)
{
	//then (for the second half) look through the room by row
	m[room][row];
	++i;
}


equations for adding a new path

ants - total ants going through path
moves - lines on the stdout
paths - there can be multiple sets of working paths, so paths is only
		considering the set that is being looked at
pathlen - longest path length (in links) of the current path set
canlook - can you check the routes for another ending (one itteration)

equation for how many moves it would take in the current configuration:

moves = ants/paths


moves = ((ants + pathlen) - 1) + 

equation for how many ants should go on the new path:
is it always better to send an ant down a shorter path?


//canlook = if ((#ants / #paths) > pathlen)

TRUE
if (pathlen of new longest < #moves)
	add it

should pathlen be in links and not rooms? probably because that is also the amount of moves

4 / 2 + 4 % 2 + 5 = 7 (6)
4 / 1 + 4 % 1 + 4 = 8 (7)

5 / 2 + 5 % 2 + 5 = 8 (6)
5 / 1 + 5 % 1 + 4 = 9 (8)

6 / 2 + 6 % 2 + 5 = 8 (6)
6 / 1 + 6 % 1 + 4 = 9 (8)
